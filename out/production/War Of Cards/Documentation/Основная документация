Новые идеи:
  -  Химические элементы в виде карт-ресурсов с необычной добычей. Например, кислород, водород, нитроген и т.д.
  -  Кейсы в виде красивых коробок с проёмами для карт
  -  Карта как "ёмкость" для ресурсов. Понятие пустой карты и заряжение её ресурсами.


                                                Основная документация
    Название: War Of Cards
    Версия: Pre-dev 0.3

    Описание и геймплей:
        War Of Cards - игра с открытым миром, в жанре "песочница", основанная на добыче ресурсов, развитии, коммандовании, крафте и сражении.

        War Of Cards имеет несколько режимов игры:

        Режимы игры:
            1. Одиночное выживание:
                В одиночном выживании у вас всегда изначально будет только один человек, но в последствии у вас появится возможность пополнять их количество.

            2. Групповое выживание:
                В групповом выживании у вас всегда изначально будет группа людей.
                Вы сможете выбирать любого человека из своей группы, "вселяться" в него и управлять им. За остальных будет играть ИИ.
                Всеми воинами, за которых ты не управляешь, ты сможешь коммандовать.
                При смерти воина, в которого вы были "вселены", вы сможете управлять другим.

            3. Многопользовательское одиночное выживание:
                Всё точно также, как и в Одиночном выживании, только к твоему миру смогут подключаться другие игроки.
                Ты сможешь повоевать со своим соседом, либо же попытаться с ним подружиться.

            4. Многопользовательское групповое выживание:
                Всё точно также, как и в Групповом выживании, только к твоему миру также смогут подключаться другие игроки.
                И ты, и другие игроки смогут отправлять запросы на вступление в твою или же в какую-либо другую группу.
                Игроки, пренадлежащие одной группе, смогут также выбрать себе по воину.
                При разногласиях в выборе людей, один сможет отправлять запрос другому на управление его воином, а тот сможет согласиться, или отказать.
                Также у каждой группы будет свой коммандный чат, где они, в тайне от других игроков смогут передавать друг другу информацию и что-либо придумывать.

            5. Многопользовательское сражение (всегда групповое):
                Для 2-4 команд из 5-10 человек каждая. Главная задача - уничтожить другие команды. Игра происходит в открытом мире на необитаемом острове.

        Если умрут все ваши люди - вы проиграли.

        Ваш мир содержит очень большое количество самых разных ресурсов.
        Ваша первая и основная цель в начале игры - добывать эти ресурсы с помощью имеющихся у вас людей и инструментов.
        Ресурсы, при их добыче, складываются в инвентарь человека, который их добывает. Вашим инвентарём для добытых ресурсов служит ваша одежда.
        Каждый предмет одежды служит хранилищем для добытых ресурсов с определённым количеством слотов, то есть количеством вместимых в него ресурсов.
        В панели Инвентаря все добытые и созданные предметы являются картами соответствующего предмета.
        При добыче ресурсов вам следует указывать, в какой предмет одежды следует складывать добытые ресурсы.
        Предметы в инвентаре не имеют свойства стакаться - каждый слот для одной карты.
        Кроме того, у вас есть основные слоты, которые в отличии от одежды, снять невозможно - левая рука (3 слота) и правая рука (3 слота)
        Вещи, лежащие в основных слотах вы сможете использовать. Например, при добыче ресурсов или сражении с противником.
        В своём инвенторе вы можете вытаскивать вещи из своей одежды и перекладывать их либо в другие предметы одежды, либо в основные слоты для дальнейшего использования.
        При снятии одежды вы будете иметь только 6 основных слотов и не сможете добыть много ресурсов, поэтому в начале игры вам всегда выдаётся стартовый комплект одежды.
        Более подробно о функционале инвенторя вы можете прочитать в разделе "Инвентарь и крафт".

        После успешной добычи достаточного количества ресурсов вы должны будете скрафтить какие-либо приспособления из них.
        Это можно сделать в отдельной панели - Крафт.
        При добыче какого-либо ресурса вам может выпасть не одна, а несколько карт соответствующего ресурса.
        Каждая карта ресурса имеет свои характеристики, влияющие на предметы, которые будут скрафчены из этого ресурса.
        Например, чем выше прочность какой-либо карты камня, тем прочнее получится меч, скрафченный из неё.


    Почему эта игра интересная:
        Открытый мир - просторы для воображения и творческих задумок.
        Есть как многопользовательские режимы, так и одиночные. С другими игроками всегда весело, но если вам хочется, то вы можете изучать мир и самостоятельно.
        Она полна неожиданностей и непредсказуемых вещей, что вызывает эмоции.
        Ты вынужден либо нападать, что значит прокачиваться и придумывать тактики, либо обороняться, что значит свободно строить свой дом.
        Присутствует ограниченное количество слотов. Всё это вызывает азарт.
        Нескончаемое разнообразие карт-приёмов, свободный крафт, классы игроков, сложное управление, устройство ближнего боя придаёт торжественность профессиональным игрокам в битвах.
        Большое открытое пространство, огромное количество видов ресурсов придаёт интригу и энтузиазм.
        Простое, постепенное и доступное обучение игровому процессу не даст игре надоесть вам по причине её сложности.
        Командный и общий чат позволяют обмениваться информацией с другими игроками. Всегда ведь хочется немного похвастаться своими умениями?
        Игра распределяет игроков по уровням и не даёт новичкам сражаться с бывалыми игроками.
        Свободный крафт и уникальные характеристики добытых ресурсов дадут вам возможность создать своё уникальное оружие и придумать свою уникальную тактику!

    Управление:
        "w", "s", "a", "d" - передвижение, "space" - прыжок.
        "ЛКМ" - использование карты, взятие карты.
        "ПКМ" - пермещение карты в какую-либо ёмкость на теле.
        Передвижение мышки - осматривание местности.
        Цифры - выбор, куда положить вещи, в какой слот, какие вещи использовать.
        Карту местности можно открыть на "m".
            Она заполняется при попадании одного или нескольких людей из команды на неизведанные территории.
            Она не обновляется при исчезновении или добавлении каких-либо объектов на местности, если там не находится ни одного человека из команды.
        Чат открывается на "t".
        Меню открывается на "ё".
        Крафтинг открывается на "q".
        Инвентарь открывается на "e".
        Улучшение характеристик карт - "x".
        "c" - правая рука, "z" - левая рука.
        Блок - "shift".
        Включение и выключение бега - "caps lock".

    Игрок:
        Характеристики:
            Живучесть:  0 уровень (изначальный):       10 единиц жизней.
                        1 уровень:                     20 единиц жизней.
                        2 уровень:                     30 единиц жизней.
                        3 уровень:                     40 единиц жизней.
                        4 уровень:                     50 единиц жизней.
                        5 уровень:                     60 единиц жизней.

            Сила:       0 уровень (изначальный):       +1 единица среднего урона.
            (сред.урон) 1 уровень:                     +3 единицы среднего урона.
                        2 уровень:                     +5 единиц среднего урона.
                        3 уровень:                     +7 единиц среднего урона.
                        4 уровень:                     +10 единиц среднего урона.
                        5 уровень:                     +15 единиц среднего урона.

            Скорость:   0 уровень (изначальный):       Шагом - 1 м/с. Бегом - 2 м/с. Время бега - 5сек.
            (шаг и бег) 1 уровень:                     Шагом - 1.5 м/с. Бегом - 3 м/с. Время бега - 10сек.
                        2 уровень:                     Шагом - 2 м/с. Бегом - 4 м/с. Время бега - 20сек.
                        3 уровень:                     Шагом - 2.5 м/с. Бегом - 5 м/с. Время бега - 30сек.
                        4 уровень:                     Шагом - 3 м/с. Бегом - 6 м/с. Время бега - 40сек.
                        5 уровень:                     Шагом - 4 м/с. Бегом - 7 м/с. Время бега - 50сек.

            Защита:     0 уровень (изначальный):       Отражается 25% урона, действует 3 секунду.
            (блок)      1 уровень:                     Отражается 33% урона, действует 5 секунд.
                        2 уровень:                     Отражается 50% урона, действует 6 секунд.
                        3 уровень:                     Отражается 66% урона, действует 7 секунд.
                        4 уровень:                     Отражается 75% урона, действует 8 секунд.
                        5 уровень:                     Отражается 90% урона, действует 10 секунд.

            Ловкость:   0 уровень (изначальный):       +0% единиц среднего критического урона с шансом 0%.
            (крит.урон) 1 уровень:                     +20% единиц среднего критического урона с шансом 2%.
                        2 уровень:                     +40% единиц среднего критического урона с шансом 4%.
                        3 уровень:                     +60% единиц среднего критического урона с шансом 6%.
                        4 уровень:                     +80% единиц среднего критического урона с шансом 8%.
                        5 уровень:                     +100% единиц среднего критического урона с шансом 10%.

        Описание характеристик:
            Средний урон:
                При нанесении ударов в ближнем бою урон колеблется вокруг указанного числа среднего урона. Число среднего урона увеличивается при улучшении характеристики Урон.
            Бег:
                Используется для увеличения скорости. Улучшается при улучшении характеристики Скорость.
                При получении урона во время бега, бег выключается.
                Его используемость и восстанавливаемость показывается на заполняющейся шкале сбоку.
                Восстанавливается в два раза дольше использования.
                При использовании нельзя использовать карты.
            Блок:
                Можно использовать при атаке. Во время его использования наносимый урон противника снижается на какое-то кол-во процентов в зависимости от уровня характеристики Защита.
                Его используемость и восстанавливаемость показывается на заполняющейся шкале внизу экрана.
                При его израсходовании меньше, чем на 50%, восстанавливается столько же времени, сколько использовался. Если больше, то восстанавливается в два раза дольше, чем использовался.
                При использовании можно использовать карты типов: Алхимическая карта.
            Критический урон:
                С указанным процентом вероятности позволяет наносить на указанное количество процентов урона больше. Проценты увеличиваются при улучшении характеристики Ловкость.

        Карты в начале игры:
            Одежда:
                Стартовая Нищенская карта - "Нищенская рубаха" - 1 уровень:   +20 слотов, +5 единиц жизней, +1 единица средней защиты*
                Стартовая Нищенская карта - "Нищенский штаны" - 1 уровень:    +20 слотов, +5 единиц жизней, +1 единица средней защиты
            Оружие:

            Другое:

        *Средняя защита:
            Те же особенности, что и у среднего урона.

    Развитие игры:
        Основные правила и начало:
            При заходе на сервер начинается ожидание подключения достаточного количество игроков.
            После набора игроков происходит равномерное распределение игроков по командам.
            В каждой команде проводится рулетка. Выигравший в ней получает карту "Респавн" и выбирает место появления его команды.
            Команда видит карту местности белой и круглой до использования этой карты.
            Если игрок, которому была выдана карта "Респавн" не использует её в течении 30 секунд, место выбирается автоматически.
            После появления вы видите свой отряд людей. Людей изначально такое же количество, что и игроков.
            У каждого человека посвоему прокачаны характеристики и есть разное снаряжение.
            Каждый игрок выбирает себе человека, нажав на любого из них и начинает своё развитие.
            Также можно запрашивать разрешение на управление чьим-то воином, а тот может позволить или отказать.
            Воины, которые управляются компьютером идут вслед за игроками. Ими также можно командовать.
            При смерти какого либо воина, игрок, который за него играл, начинает играть за другого воина.
            Воинов можно создавать, но если будут уничтожены все воины команды - команда проиграет.
        Добыча ресурсов:
            Чтобы добывать ресурсы нужно долбить по ним каким-либо, желательно подходящим предметом.
            При использовании неподходящего предмета, ресурс будет добывать дольше, а шанс выпадения карты станет близким к нулю.
            Есть несколько видов ресурсов, каждый из которых добывается своим предметом:
                Надземные - добываются рукой.
                Наземные - добываются инструментами.
                Подземные - добываются металлоискателями и буровыми установками.
            Нужные предметы для добычи ресурсов крафтятся из ранее добытых ресурсов.
            После добычи ресурса его можно улучшить или совместить с другим.
            Задача - получить самые хорошие ресурсы и победить с их помощью.
        Битва:
            При окончании добычи ресурсов можно начинать нападать на другие команды. Делать это можно разными способами: ближним боем, дальним боем, использованием карт приёмов и заклинаний.
            Отсуда выходят классы игроков: Воин, Стрелок, Маг.

    Профессии, знания которых необходимы для разработки данной игры:
        Инвестор, артдиректор, художник, дизайнер, программист, сценарист, бродюсер, звукорежиссёр, тестер, маркетолог.


    Война карт
    Это - игра в жанре песочница! В ней тебе надо добывать ресурсы, создавать оружие из добытых ресурсов и сражаться с противниками!

    Ты попал в неизвестный тебе мир. В нем тебе необходимо добывать ресурсы, делать из них инструменты, оружие, броню, заклинания и т.д., строить свою базу для защиты от врагов, и нападать на своих врагов! Враги могут быть как настоящие игроки в режиме многопользовательской игры, так и местные звери. Со всего выпадает очень много разных ценных ресурсов, которые ты сможешь складывать на своей базе и делать из них более хорошие инструменты и оружие!
    Любые ресурсы в игре измеряются в картах, поэтому игра получила такое название. Мир открытый с большим количеством биомов, мобов, данжей и т.д.. В общем, ты не заскучаешь ;)
    Игра уже находится в тщательной разработке и задумка уже ясна.

    War of cards
    This is a sandbox game! In it you need to get resources, create weapons from the extracted resources and fight against opponents!

    You are in an unknown world. In it you need to get resources, make tools, weapons, armor, spells, etc. from them, build your base for defense against enemies, and attack your enemies! Enemies can be both real players in the multiplayer game mode, and local animals. A lot of different valuable resources fall out of everything that you can put on your base and make better tools and weapons out of them!
    Any resources in the game are measured in maps, so the game got its name. An open world with a large number of biomes, mobs, dungeons, etc. .. In general, you will not get bored;)
    The game is already under careful development and the idea is already clear.



        //Другой, более мудрёный способ перемещения волков, при котором по прямой волки двигаются быстрее, нежели по диагонали:

        //                                int rand = (int) (Math.random() * 4); //То вычисляем случайное значение для переменной rand в пределах от 0 до 3 включительно.
        //                                switch (rand) { //Исли переменной rand дали значение...
        //                                    case 0: //...0
        //                                        if (xOfPlayerOnFrame < essence.xOnFrame) { //Если игрок находится левее волка.
        //                                            essence.xOnFrame -= 2 * essence.essenceSpeed; //То волк двигается влево, по направлению к игроку.
        //                                        } else if (xOfPlayerOnFrame > essence.xOnFrame) { //Если игрок находится правее волка.
        //                                            essence.xOnFrame += 2 * essence.essenceSpeed; //То волк двигается вправо, по направлению к игроку.
        //                                        } else { //Иначе, то есть, если игрок на одной координате с волком по оси x.
        //                                            if (yOfPlayerOnFrame < essence.yOnFrame) { //Если игрок находится выше волка.
        //                                                essence.yOnFrame -= 2 * essence.essenceSpeed; //То волк двигается вверх, по направлению к игроку.
        //                                            } else if (yOfPlayerOnFrame > essence.yOnFrame) { //Если игрок находится ниже волка.
        //                                                essence.yOnFrame += 2 * essence.essenceSpeed; //То волк двигается вниз, по направлению к игроку.
        //                                            }
        //                                        }
        //                                        break; //Конец кейса.
        //                                    case 1: //...1
        //                                        if (xOfPlayerOnFrame > essence.xOnFrame) { //Если игрок находится правее волка.
        //                                            essence.xOnFrame += 2 * essence.essenceSpeed; //То волк двигается вправо, по направлению к игроку.
        //                                        } else if (xOfPlayerOnFrame < essence.xOnFrame) { //Если игрок находится левее волка.
        //                                            essence.xOnFrame -= 2 * essence.essenceSpeed; //То волк двигается влево, по направлению к игроку.
        //                                        } else {
        //                                            if (yOfPlayerOnFrame < essence.yOnFrame) { //Если игрок находится выше волка.
        //                                                essence.yOnFrame -= 2 * essence.essenceSpeed; //То волк двигается вверх, по направлению к игроку.
        //                                            } else if (yOfPlayerOnFrame > essence.yOnFrame) { //Если игрок находится ниже волка.
        //                                                essence.yOnFrame += 2 * essence.essenceSpeed; //То волк двигается вниз, по направлению к игроку.
        //                                            }
        //                                        }
        //                                        break; //Конец кейса.
        //                                    case 2: //...2
        //                                        if (yOfPlayerOnFrame < essence.yOnFrame) { //Если игрок находится выше волка.
        //                                            essence.yOnFrame -= 2 * essence.essenceSpeed; //То волк двигается вверх, по направлению к игроку.
        //                                        } else if (yOfPlayerOnFrame > essence.yOnFrame) { //Если игрок находится ниже волка.
        //                                            essence.yOnFrame += 2 * essence.essenceSpeed; //То волк двигается вниз, по направлению к игроку.
        //                                        } else {
        //                                            if (xOfPlayerOnFrame < essence.xOnFrame) { //Если игрок находится левее волка.
        //                                                essence.xOnFrame -= 2 * essence.essenceSpeed; //То волк двигается влево, по направлению к игроку.
        //                                            } else if (xOfPlayerOnFrame > essence.xOnFrame) { //Если игрок находится правее волка.
        //                                                essence.xOnFrame += 2 * essence.essenceSpeed; //То волк двигается вправо, по направлению к игроку.
        //                                            }
        //                                        }
        //                                        break; //Конец кейса.
        //                                    case 3: //...3
        //                                        if (yOfPlayerOnFrame > essence.yOnFrame) { //Если игрок находится ниже волка.
        //                                            essence.yOnFrame += 2 * essence.essenceSpeed; //То волк двигается вниз, по направлению к игроку.
        //                                        } else if (yOfPlayerOnFrame < essence.yOnFrame) { //Если игрок находится выше волка.
        //                                            essence.yOnFrame -= 2 * essence.essenceSpeed; //То волк двигается вверх, по направлению к игроку.
        //                                        } else {
        //                                            if (xOfPlayerOnFrame < essence.xOnFrame) { //Если игрок находится левее волка.
        //                                                essence.xOnFrame -= 2 * essence.essenceSpeed; //То волк двигается влево, по направлению к игроку.
        //                                            } else if (xOfPlayerOnFrame > essence.xOnFrame) { //Если игрок находится правее волка.
        //                                                essence.xOnFrame += 2 * essence.essenceSpeed; //То волк двигается вправо, по направлению к игроку.
        //                                            }
        //                                        }
        //                                        break; //Конец кейса.
        //                                }



        //            Runnable repaintRunnable = () -> { //Создание потока repaintRunnable, который будет отвечать за постоянную перерисовку окна mainFrame через каждые 10 милисекунд.
        //                while (true) { //Бесконечный цикл, так как вызываться он больше не будет.
        //                    if (isRepaint) { //Переменная isRepaint нужна для временной остановки перерисовки экрана, но из-за большой нагрузки на компьютер, я врядли буду её когда-нибудь менять.
        //                        mainFrame.repaint(); //Выполнение перерисовки окна mainFrame.
        //                        try { //try-catch для избегания остановки кода при ошибке.
        //                            Thread.sleep(10); //Пауза в размере 10 милисекунд для избегания постоянной перерисовки и большой нагрузки на компьютер.
        //                        } catch (InterruptedException e) {
        //                            e.printStackTrace(); //Обработка ошибки.
        //                        }
        //                    } else {
        //                        try { //try-catch для избегания остановки кода при ошибке.
        //                            Thread.sleep(10); //Пауза в размере 10 милисекунд.
        //                        } catch (InterruptedException e) {
        //                            e.printStackTrace(); //Обработка ошибки.
        //                        }
        //                    } //Конец else.
        //                } //Конец while.
        //            }; //Конец создания потока repaintRunnable.
        //
        //            Thread threadRepaint = new Thread(repaintRunnable); //Упаковывание потока.
        //            threadRepaint.start(); //Запуск потока.
        //            System.out.println("repaintRunnable has started"); //Вывод системного уседомления.
        //
        //            Runnable essenceRunnable = () -> { //Создание потока essenceRunnable, который будет отвечать за постоянное изменение координат существ в гире
        //                while (true) { //Бесконечный цикл, так как вызываться он больше не будет.
        //                    for (Essence essence : worldNow.listOfEssences) { //То, что находится в этом цикле for, произойдёт со всеми объектами из списка listOfEssences.
        //                        if (essence.name.equals("Wolf")) { //Отсортировываем всех существ и берём только волков.
        //                            if (ifNotOverBarrier(essence.xOnFrame, essence.yOnFrame)) { //Если волк не наступил на барьер.
        //                                boolean isX = false; //Создаём булеву переменную для проверки близости игрока к волку по оси x.
        //                                boolean isY = false; //Создаём булеву переменную для проверки близости игрока к волку по оси y.
        //                                if (essence.xOnFrame - xOfPlayerOnFrame < 300 && essence.xOnFrame - xOfPlayerOnFrame > -300 && gameIsStartedOrNot) { //Если игрок относительно волка находится не дальше 300 пикселей по оси x.
        //                                    isX = true; //То даем переменной isX значение true, чтобы показать, что игрок близок к волку по оси x.
        //                                } //Конец if.
        //                                if (essence.yOnFrame - yOfPlayerOnFrame < 300 && essence.yOnFrame - yOfPlayerOnFrame > -300 && gameIsStartedOrNot) { //Если игрок относительно волка находится не дальше 300 пикселей по оси y.
        //                                    isY = true; //То даем переменной isY значение true, чтобы показать, что игрок близок к волку по оси y.
        //                                } //Конец if.
        //                                if (isX && isY) { //Если игрок близок к волку и по оси x, и по оси y.
        //                                    if ((yOfPlayerOnFrame - essence.yOnFrame < 5 && yOfPlayerOnFrame - essence.yOnFrame > -5)
        //                                            && (xOfPlayerOnFrame - essence.xOnFrame < 5 && xOfPlayerOnFrame - essence.xOnFrame > -5)) { //Если волк очень близко к игроку.
        //                                        xOfPlayerOnFrame -= 10;
        //                                        try { //try-catch для паузы.
        //                                            Thread.sleep(2); //Пауза в размере 2 милисекунд.
        //                                        } catch (InterruptedException e) {
        //                                            e.printStackTrace(); //Обработка ошибки.
        //                                        }
        //                                        xOfPlayerOnFrame += 20;
        //                                        try { //try-catch для паузы.
        //                                            Thread.sleep(2); //Пауза в размере 2 милисекунд.
        //                                        } catch (InterruptedException e) {
        //                                            e.printStackTrace(); //Обработка ошибки.
        //                                        }
        //                                        xOfPlayerOnFrame -= 10;
        //                                        if (timerStatement == 0) { //Если переменная-таймер timerStatement равна 0.
        //                                            worldNow.health--; //У игрока отнимается одна жизнь.
        //                                            mainFrame.repaint();
        //                                        } //Конец if.
        //                                        if (worldNow.health == 0) { //Если у игрока 0 жизней.
        //                                            respawn(); //Он погибает и респавнится.
        //                                        } else { //Если у игрока не 0 жизней.
        //                                            if (timerStatement == 0) { //И если переменная-таймер timerStatement равна 0.
        //                                                timerStatement = timeForTakingAHealth; //Ей придаётся значение переменной timeForTakingAHealth.
        //                                            } else { //Если переменная-таймер timerStatement не равна 0.
        //                                                timerStatement--; //Она уменьшается на единицу.
        //                                            } //Конец else.
        //                                        } //Конец else.
        //                                    } else { //Если же волк не достаточно близок к игроку, чтобы укусить его.
        //                                        if (xOfPlayerOnFrame - essence.xOnFrame < -3) { //Если игрок находится левее волка.
        //                                            essence.xOnFrame -= 2 * essence.essenceSpeed; //То волк двигается влево, по направлению к игроку.
        //                                        } else if (xOfPlayerOnFrame - essence.xOnFrame > 3) { //Если игрок находится правее волка.
        //                                            essence.xOnFrame += 2 * essence.essenceSpeed; //То волк двигается вправо, по направлению к игроку.
        //                                        }
        //                                        if (yOfPlayerOnFrame - essence.yOnFrame < -3) { //Если игрок находится выше волка.
        //                                            essence.yOnFrame -= 2 * essence.essenceSpeed; //То волк двигается вверх, по направлению к игроку.
        //                                        } else if (yOfPlayerOnFrame - essence.yOnFrame > 3) { //Если игрок находится ниже волка.
        //                                            essence.yOnFrame += 2 * essence.essenceSpeed; //То волк двигается вниз, по направлению к игроку.
        //                                        }
        //                                    }
        //
        //                                    //Другой, более мудрёный способ перемещения волков, при котором по прямой волки двигаются быстрее, нежели по диагонали:
        //
        ////                                int rand = (int) (Math.random() * 4); //То вычисляем случайное значение для переменной rand в пределах от 0 до 3 включительно.
        ////                                switch (rand) { //Исли переменной rand дали значение...
        ////                                    case 0: //...0
        ////                                        if (xOfPlayerOnFrame < essence.xOnFrame) { //Если игрок находится левее волка.
        ////                                            essence.xOnFrame -= 2 * essence.essenceSpeed; //То волк двигается влево, по направлению к игроку.
        ////                                        } else if (xOfPlayerOnFrame > essence.xOnFrame) { //Если игрок находится правее волка.
        ////                                            essence.xOnFrame += 2 * essence.essenceSpeed; //То волк двигается вправо, по направлению к игроку.
        ////                                        } else { //Иначе, то есть, если игрок на одной координате с волком по оси x.
        ////                                            if (yOfPlayerOnFrame < essence.yOnFrame) { //Если игрок находится выше волка.
        ////                                                essence.yOnFrame -= 2 * essence.essenceSpeed; //То волк двигается вверх, по направлению к игроку.
        ////                                            } else if (yOfPlayerOnFrame > essence.yOnFrame) { //Если игрок находится ниже волка.
        ////                                                essence.yOnFrame += 2 * essence.essenceSpeed; //То волк двигается вниз, по направлению к игроку.
        ////                                            }
        ////                                        }
        ////                                        break; //Конец кейса.
        ////                                    case 1: //...1
        ////                                        if (xOfPlayerOnFrame > essence.xOnFrame) { //Если игрок находится правее волка.
        ////                                            essence.xOnFrame += 2 * essence.essenceSpeed; //То волк двигается вправо, по направлению к игроку.
        ////                                        } else if (xOfPlayerOnFrame < essence.xOnFrame) { //Если игрок находится левее волка.
        ////                                            essence.xOnFrame -= 2 * essence.essenceSpeed; //То волк двигается влево, по направлению к игроку.
        ////                                        } else {
        ////                                            if (yOfPlayerOnFrame < essence.yOnFrame) { //Если игрок находится выше волка.
        ////                                                essence.yOnFrame -= 2 * essence.essenceSpeed; //То волк двигается вверх, по направлению к игроку.
        ////                                            } else if (yOfPlayerOnFrame > essence.yOnFrame) { //Если игрок находится ниже волка.
        ////                                                essence.yOnFrame += 2 * essence.essenceSpeed; //То волк двигается вниз, по направлению к игроку.
        ////                                            }
        ////                                        }
        ////                                        break; //Конец кейса.
        ////                                    case 2: //...2
        ////                                        if (yOfPlayerOnFrame < essence.yOnFrame) { //Если игрок находится выше волка.
        ////                                            essence.yOnFrame -= 2 * essence.essenceSpeed; //То волк двигается вверх, по направлению к игроку.
        ////                                        } else if (yOfPlayerOnFrame > essence.yOnFrame) { //Если игрок находится ниже волка.
        ////                                            essence.yOnFrame += 2 * essence.essenceSpeed; //То волк двигается вниз, по направлению к игроку.
        ////                                        } else {
        ////                                            if (xOfPlayerOnFrame < essence.xOnFrame) { //Если игрок находится левее волка.
        ////                                                essence.xOnFrame -= 2 * essence.essenceSpeed; //То волк двигается влево, по направлению к игроку.
        ////                                            } else if (xOfPlayerOnFrame > essence.xOnFrame) { //Если игрок находится правее волка.
        ////                                                essence.xOnFrame += 2 * essence.essenceSpeed; //То волк двигается вправо, по направлению к игроку.
        ////                                            }
        ////                                        }
        ////                                        break; //Конец кейса.
        ////                                    case 3: //...3
        ////                                        if (yOfPlayerOnFrame > essence.yOnFrame) { //Если игрок находится ниже волка.
        ////                                            essence.yOnFrame += 2 * essence.essenceSpeed; //То волк двигается вниз, по направлению к игроку.
        ////                                        } else if (yOfPlayerOnFrame < essence.yOnFrame) { //Если игрок находится выше волка.
        ////                                            essence.yOnFrame -= 2 * essence.essenceSpeed; //То волк двигается вверх, по направлению к игроку.
        ////                                        } else {
        ////                                            if (xOfPlayerOnFrame < essence.xOnFrame) { //Если игрок находится левее волка.
        ////                                                essence.xOnFrame -= 2 * essence.essenceSpeed; //То волк двигается влево, по направлению к игроку.
        ////                                            } else if (xOfPlayerOnFrame > essence.xOnFrame) { //Если игрок находится правее волка.
        ////                                                essence.xOnFrame += 2 * essence.essenceSpeed; //То волк двигается вправо, по направлению к игроку.
        ////                                            }
        ////                                        }
        ////                                        break; //Конец кейса.
        ////                                }
        //
        //                                } else if (essence.timePassed == 0) { //Если же игрок не достаточно близок к волку, чтобы волк его заметил и при этом настало время для следующего шага.
        //                                    int rand = (int) (Math.random() * 4); //То вычисляем случайное значение для переменной rand в пределах от 0 до 3 включительно.
        //                                    switch (rand) { //Исли переменной rand дали значение...
        //                                        case 0: //...0
        //                                            essence.xOnFrame -= 2 * essence.essenceSpeed; //Передвижение волка влево на определённое количество пикселей, в зависимости от скорости волка.
        //                                            break; //Конец кейса.
        //                                        case 1: //...1
        //                                            essence.xOnFrame += 2 * essence.essenceSpeed; //Передвижение волка вправо на определённое количество пикселей, в зависимости от скорости волка.
        //                                            break; //Конец кейса.
        //                                        case 2: //...2
        //                                            essence.yOnFrame -= 2 * essence.essenceSpeed; //Передвижение волка вверх на определённое количество пикселей, в зависимости от скорости волка.
        //                                            break; //Конец кейса.
        //                                        case 3: //...3
        //                                            essence.yOnFrame += 2 * essence.essenceSpeed; //Передвижение волка вниз на определённое количество пикселей, в зависимости от скорости волка.
        //                                            break; //Конец кейса.
        //                                    }
        //                                    essence.timePassed = essence.timeOfNextWalk; //Заводим новое время для того, чтобы волк не бегал, как сумасшедшиц.
        //                                } else { //Если же время не настало и запущен таймер.
        //                                    essence.timePassed--; //То уменьшаем его.
        //                                } //Конец else.
        //                            } else { //Если же волк наступил на барьер.
        //                                System.out.println(essence + " has died."); //Вывод системного уведомления.
        //                                worldNow.listOfEssences.remove(essence); //Удаление волка из списка существ.
        //                                System.out.println("Уведомление. Волк не знал, что в игре есть барьеры и умер от одного из них."); //Вывод пользовательского уведомления.
        //                                break; //Выход
        //                            }
        //                        } //Конец if
        //                    } //Конец цикла for.
        //                    try { //try-catch для избегания остановки кода при ошибке.
        //                        Thread.sleep(30); //Пауза в размере 30 милисекунд для избегания постоянного перемещения и большой нагрузки на компьютер.
        //                    } catch (InterruptedException e) {
        //                        e.printStackTrace(); //Обработка ошибки.
        //                    }
        //                } //Конец цикла while.
        //            }; //Конец создания потока essenceRunnable.
        //
        //            Thread threadEssence = new Thread(essenceRunnable); //Упаковывание потока.
        //            threadEssence.start(); //Запуск потока.
        //            System.out.println("essenceRunnable has started"); //Вывод системного уведомления.